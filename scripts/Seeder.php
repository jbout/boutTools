<?php
/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2015 (original work) Open Assessment Technologies SA;
 *
 *
 */
namespace jbout\boutTools\scripts;

use oat\oatbox\extension\AbstractAction;
use oat\oatbox\user\UserLanguageService;
use oat\oatbox\service\ConfigurableService;
use oat\oatbox\Configurable;

/**
 * Admin Action, based on xml:
 * 
 * <action id="access-control-admin" name="Access control" url="/taoDacSimple/AdminAccessController/adminPermissions" group="tree" context="resource">
 *     <icon id="icon-unlock" />
 * </action>
 */
class Seeder extends AbstractAction {
    
    public function __invoke($params)
    {
        if (count($params) != 1) {
            return new \common_report_Report(\common_report_Report::TYPE_ERROR, 'Usage: '.__CLASS__.' OUT_FILE');
        }
        $file = array_shift($params);
        $extensions = $this->getServiceLocator()->get(\common_ext_ExtensionsManager::SERVICE_ID)->getInstalledExtensions();
        $seed = [
            'seed' => [
                'author' => 'autogenerated'
            ],
            'extensions' => array_keys($extensions),
            'super-user' => [
                'login' => 'admin',
                'password' => 'admin'
            ],
            'configuration' => [
                'global' => [
                    "lang" => $this->getServiceLocator()->get(UserLanguageService::SERVICE_ID)->getDefaultLanguage(),
                    "mode"=> "debug",
                    "instance_name" => "seeded",
                    "namespace" => LOCAL_NAMESPACE,
                    "url" => ROOT_URL,
                    "file_path" => FILES_PATH,
                    "root_path" => ROOT_PATH,
                    "timezone" => TIME_ZONE,
                    "import_data" => false
                ]
            ],
            'postInstall' => []
        ];
        foreach ($extensions as $extension) {
            $configDir = ROOT_PATH.'config/'.$extension->getId();
            if (file_exists($configDir)) {
                //$extension = new \common_ext_Extension($id);
                $files = \tao_helpers_File::scandir(ROOT_PATH.'config/'.$extension->getId(), ['only' => \tao_helpers_File::SCAN_FILE]);
                $extSeed = [];
                foreach ($files as $configFile) {
                    $configKey = substr($configFile, 0, strpos($configFile, '.'));
                    $serviceKey = $extension->getId().'/'.$configKey;
                    $value = $this->getServiceLocator()->get($serviceKey);
                    $extSeed[$configKey] = $this->transformService($value);
                }
                $seed['configuration'][$extension->getId()] = $extSeed;
            }
        }
        // should never be included
        unset($seed['configuration']['generis']['installation']);
        // should probably not be included
        unset($seed['configuration']['generis']['event']);
        // prevent duplicate read models
        unset($seed['configuration']['generis']['ontology']);
        // currently broken
        unset($seed['configuration']['generis']['uriProvider']);
        // should never be included
        unset($seed['configuration']['tao']['taskLog']);
        
        // custom seed format
        //$seed['configuration']['generis']['persistences'] = $seed['configuration']['generis']['persistences']['options']['persistences'];
        
        file_put_contents($file, json_encode($seed,  JSON_PRETTY_PRINT));
        return new \common_report_Report(\common_report_Report::TYPE_SUCCESS, 'Wrote seed to file '.$file);
    }
    
    private function transformService(ConfigurableService $service)
    {
        $config = [
            'type' => "configurableService",
            'class' => get_class($service),
            'options' => $this->transform($service->getOptions())
        ];
        return $config;
    }
    
    private function transform($value)
    {
        if (is_object($value) && $value instanceof Configurable) {
            $returnValue = [
                'class' => get_class($value),
                'options' => $this->transform($value->getOptions())
            ];
        } elseif (is_array($value)) {
            $returnValue = [];
            foreach ($value as $key => $val) {
                $returnValue[$key] = $this->transform($val);
            }
        } else {
            $returnValue = $value;
        }
        return $returnValue;
    }
}
